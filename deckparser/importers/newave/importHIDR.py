from os import remove
from numpy import dtype, fromfile, int32, float32
from logging import info


def importHIDR(fn):
    lsttipo = [
        ('Nome', 'S12'),
        ('Posto', int32),
        ('Posto_BDH', 'S8'),
        ('SubSis', int32),
        ('Empresa', int32),
        ('Jusante', int32),
        ('Desvio', int32),
        ('VolMinOper', float32),
        ('VolMaxOper', float32),
        ('VolVert', float32),
        ('VolCanalDesvio', float32),
        ('NAMontMin', float32),
        ('NAMontMax', float32),
        ('VolxCota_1', float32),
        ('VolxCota_2', float32),
        ('VolxCota_3', float32),
        ('VolxCota_4', float32),
        ('VolxCota_5', float32),
        ('AreaxCota_1', float32),
        ('AreaxCota_2', float32),
        ('AreaxCota_3', float32),
        ('AreaxCota_4', float32),
        ('AreaxCota_5', float32),
        ('CoefEvap_1', int32),
        ('CoefEvap_2', int32),
        ('CoefEvap_3', int32),
        ('CoefEvap_4', int32),
        ('CoefEvap_5', int32),
        ('CoefEvap_6', int32),
        ('CoefEvap_7', int32),
        ('CoefEvap_8', int32),
        ('CoefEvap_9', int32),
        ('CoefEvap_10', int32),
        ('CoefEvap_11', int32),
        ('CoefEvap_12', int32),
        ('NumConjMaq', int32),
        ('NumMaqConj_1', int32),
        ('NumMaqConj_2', int32),
        ('NumMaqConj_3', int32),
        ('NumMaqConj_4', int32),
        ('NumMaqConj_5', int32),
        ('PotEfetConj_1', float32),
        ('PotEfetConj_2', float32),
        ('PotEfetConj_3', float32),
        ('PotEfetConj_4', float32),
        ('PotEfetConj_5', float32),
        ('Pol_QHT_1_1', float32),
        ('Pol_QHT_1_2', float32),
        ('Pol_QHT_1_3', float32),
        ('Pol_QHT_1_4', float32),
        ('Pol_QHT_1_5', float32),
        ('Pol_QHT_2_1', float32),
        ('Pol_QHT_2_2', float32),
        ('Pol_QHT_2_3', float32),
        ('Pol_QHT_2_4', float32),
        ('Pol_QHT_2_5', float32),
        ('Pol_QHT_3_1', float32),
        ('Pol_QHT_3_2', float32),
        ('Pol_QHT_3_3', float32),
        ('Pol_QHT_3_4', float32),
        ('Pol_QHT_3_5', float32),
        ('Pol_QHT_4_1', float32),
        ('Pol_QHT_4_2', float32),
        ('Pol_QHT_4_3', float32),
        ('Pol_QHT_4_4', float32),
        ('Pol_QHT_4_5', float32),
        ('Pol_QHT_5_1', float32),
        ('Pol_QHT_5_2', float32),
        ('Pol_QHT_5_3', float32),
        ('Pol_QHT_5_4', float32),
        ('Pol_QHT_5_5', float32),
        ('Pol_QHG_1_1', float32),
        ('Pol_QHG_1_2', float32),
        ('Pol_QHG_1_3', float32),
        ('Pol_QHG_1_4', float32),
        ('Pol_QHG_1_5', float32),
        ('Pol_QHG_2_1', float32),
        ('Pol_QHG_2_2', float32),
        ('Pol_QHG_2_3', float32),
        ('Pol_QHG_2_4', float32),
        ('Pol_QHG_2_5', float32),
        ('Pol_QHG_3_1', float32),
        ('Pol_QHG_3_2', float32),
        ('Pol_QHG_3_3', float32),
        ('Pol_QHG_3_4', float32),
        ('Pol_QHG_3_5', float32),
        ('Pol_QHG_4_1', float32),
        ('Pol_QHG_4_2', float32),
        ('Pol_QHG_4_3', float32),
        ('Pol_QHG_4_4', float32),
        ('Pol_QHG_4_5', float32),
        ('Pol_QHG_5_1', float32),
        ('Pol_QHG_5_2', float32),
        ('Pol_QHG_5_3', float32),
        ('Pol_QHG_5_4', float32),
        ('Pol_QHG_5_5', float32),
        ('Pol_PH_1_1', float32),
        ('Pol_PH_1_2', float32),
        ('Pol_PH_1_3', float32),
        ('Pol_PH_1_4', float32),
        ('Pol_PH_1_5', float32),
        ('Pol_PH_2_1', float32),
        ('Pol_PH_2_2', float32),
        ('Pol_PH_2_3', float32),
        ('Pol_PH_2_4', float32),
        ('Pol_PH_2_5', float32),
        ('Pol_PH_3_1', float32),
        ('Pol_PH_3_2', float32),
        ('Pol_PH_3_3', float32),
        ('Pol_PH_3_4', float32),
        ('Pol_PH_3_5', float32),
        ('Pol_PH_4_1', float32),
        ('Pol_PH_4_2', float32),
        ('Pol_PH_4_3', float32),
        ('Pol_PH_4_4', float32),
        ('Pol_PH_4_5', float32),
        ('Pol_PH_5_1', float32),
        ('Pol_PH_5_2', float32),
        ('Pol_PH_5_3', float32),
        ('Pol_PH_5_4', float32),
        ('Pol_PH_5_5', float32),
        ('HNomConj_1', float32),
        ('HNomConj_2', float32),
        ('HNomConj_3', float32),
        ('HNomConj_4', float32),
        ('HNomConj_5', float32),
        ('EngEfetConj_1', int32),
        ('EngEfetConj_2', int32),
        ('EngEfetConj_3', int32),
        ('EngEfetConj_4', int32),
        ('EngEfetConj_5', int32),
        ('ProdEspec', float32),
        ('CoefPerdHidr', float32),
        ('NumCurvChave', int32),
        ('CurvaChave_1_1', float32),
        ('CurvaChave_1_2', float32),
        ('CurvaChave_1_3', float32),
        ('CurvaChave_1_4', float32),
        ('CurvaChave_1_5', float32),
        ('CurvaChave_2_1', float32),
        ('CurvaChave_2_2', float32),
        ('CurvaChave_2_3', float32),
        ('CurvaChave_2_4', float32),
        ('CurvaChave_2_5', float32),
        ('CurvaChave_3_1', float32),
        ('CurvaChave_3_2', float32),
        ('CurvaChave_3_3', float32),
        ('CurvaChave_3_4', float32),
        ('CurvaChave_3_5', float32),
        ('CurvaChave_4_1', float32),
        ('CurvaChave_4_2', float32),
        ('CurvaChave_4_3', float32),
        ('CurvaChave_4_4', float32),
        ('CurvaChave_4_5', float32),
        ('CurvaChave_5_1', float32),
        ('CurvaChave_5_2', float32),
        ('CurvaChave_5_3', float32),
        ('CurvaChave_5_4', float32),
        ('CurvaChave_5_5', float32),
        ('CurvaChave_6_1', float32),
        ('CurvaChave_6_2', float32),
        ('CurvaChave_6_3', float32),
        ('CurvaChave_6_4', float32),
        ('CurvaChave_6_5', float32),
        ('NARefCurvChave_1', float32),
        ('NARefCurvChave_2', float32),
        ('NARefCurvChave_3', float32),
        ('NARefCurvChave_4', float32),
        ('NARefCurvChave_5', float32),
        ('NARefCurvChave_6', float32),
        ('CFugaMed', float32),
        ('VertInfCFuga', int32),
        ('FCMAX', float32),
        ('FCMIN', float32),
        ('VazNatMinHist', int32),
        ('NumUnidBase', int32),
        ('TipoTurbina', int32),
        ('RepresConj', int32),
        ('TEIF', float32),
        ('IP', float32),
        ('TipoPerda', int32),
        ('Data', 'S8'),
        ('Observacao', 'S43'),
        ('VolRef', float32),
        ('Regulacao', 'S1')
    ]
    bdhtipo = dtype(lsttipo)
    bdhdata = fromfile(fn, dtype=bdhtipo, sep="")
    HIDRcount = len(bdhdata)
    if HIDRcount not in [320, 600, 601]:
        print("O arquivo HIDR.DAT importado é inválido.")
        return False
    HIDR = dict()
    for reg in bdhdata:
        chave = reg['Nome'].decode('utf-8').strip()
        if chave != '':
            temp = reg.tolist()
            tdict = dict()
            for idx in range(1, len(lsttipo)):
                if lsttipo[idx][0] in ['Data', 'Observacao', 'Regulacao', 'Posto_BDH']:
                    try:
                        value = temp[idx].decode('utf-8')
                    except Exception as e:
                        info(e)
                        value = ''
                else:
                    value = temp[idx]
                tdict[lsttipo[idx][0]] = value
            HIDR[chave] = tdict
    remove(fn)
    return HIDR, HIDRcount
